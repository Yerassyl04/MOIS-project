import numpy as np
import pandas as pd
import string
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, precision_score
import tkinter as tk
from tkinter import messagebox


# Function to perform simple stemming
def simple_kazakh_stemmer(word):
    # List of common Kazakh suffixes to remove
    # Koptik septik Taueldik Zhiktik
    suffixes = [
        'лар', 'лер', 'дар', 'дер', 'тық', 'тік', 'шы', 'ші', 'дық', 'дік',
        'ған', 'ген', 'сыз', 'сіз', 'нан', 'нен', 'ым', 'ім', 'мыз', 'міз','ымыз',
        'мін', 'сің', 'сін','тар','тер','лар','лер','ң',
        'ың', 'ің', 'ы', 'і', 'а', 'е', 'у', 'й',  'ның', 'нің', 'дың', 'дің',
        'тың', 'тің', 'ға', 'ге', 'қа', 'ке', 'ны', 'ні', 'ды', 'ді', 'ты', 'ті',
        'да', 'де', 'та', 'те', 'нан', 'нен', 'дан', 'ден', 'тан', 'тен', 'мен', 'беп', 'пен'
    ]

    for suffix in suffixes:
        if word.endswith(suffix):
            # Remove the suffix and return the stemmed word
            return word[:-len(suffix)]

    return word  # Return the original word if no suffix is found


# Updated stopwords list
kazakh_stopwords = [
    'және', 'бір', 'мен', 'барлық', 'ол', 'бұл', 'біз', 'сіз', 'олар',
    'ішінде', 'бірақ', 'сондай-ақ', 'болып', 'соcын', 'ау', 'та', 'бізде',
    'арқылы', 'өзі', 'үшін', 'менің', 'сенің', 'олардың', 'бізді', 'болады',
    'кім', 'не', 'қайда', 'қашан', 'неге', 'немесе', 'әлде', 'бұрын', 'соң',
    'сіздер', 'сосын', 'бәрі', 'әрбір', 'әртүрлі', 'тек', 'бақыт', 'сонымен',
    'мұнда', 'онда', 'белгілі', 'айту', 'көп', 'жаңа', 'бұл', 'бәрі',
    'әрі', 'жақсы', 'жаман', 'дегенмен', 'ондай', 'жол', 'үшін', 'арқылы',
    'мен', 'параметр', 'негізінде', 'жүзінде', 'осы', 'сияқты', 'тағы',
    'осылай', 'себеп', 'бар', 'келген', 'кезде' 'ша','ше','да','де','та','те'
]


# Function to preprocess the Kazakh text with stemming
def preprocess_text_kazakh(text):
    text = text.lower()  # Convert to lowercase
    tokens = text.split()  # Simple tokenization (split by spaces)
    tokens = [word for word in tokens if word.isalnum()]  # Remove punctuation and non-alphanumeric characters
    tokens = [word for word in tokens if word not in kazakh_stopwords]  # Remove Kazakh stopwords
    tokens = [simple_kazakh_stemmer(word) for word in tokens]  # Apply stemming
    return " ".join(tokens)


# Load dataset from CSV file
df = pd.read_csv(r"C:\Users\asus\OneDrive\Рабочий стол\MOIS Zhukabayeva T.K\kazspam.csv", encoding='utf-8')

# Data cleaning and preprocessing
df = df[['label', 'message']]
df.dropna(inplace=True)

# Apply Kazakh text preprocessing
df['message'] = df['message'].apply(preprocess_text_kazakh)

# Feature extraction using TfidfVectorizer
tfidf = TfidfVectorizer(max_features=3000)
X = tfidf.fit_transform(df['message']).toarray()
y = df['label'].values

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = MultinomialNB()
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)

print(f"Model Accuracy: {accuracy:.4f}")
print(f"Model Precision: {precision:.4f}")


# Function to predict spam or ham for new input
def predict_spam(message):
    processed_message = preprocess_text_kazakh(message)
    vectorized_message = tfidf.transform([processed_message])
    prediction = model.predict(vectorized_message)[0]
    return "Spam" if prediction == 1 else "Not Spam"


# Function to handle button click event
def on_predict():
    message = message_entry.get("1.0", tk.END)  # Get all text from the Text widget
    result = predict_spam(message.strip())  # Strip any extra whitespace
    messagebox.showinfo("Prediction Result", f"The message is: {result}")



# Setting up the Tkinter GUI
root = tk.Tk()
root.title("Kazakh Spam Detection")

tk.Label(root, text="Enter your message:").pack(pady=10)
message_entry = tk.Text(root, height=10, width=60)
message_entry.pack(pady=10)

predict_button = tk.Button(root, text="Predict", command=on_predict)
predict_button.pack(pady=20)

root.mainloop()
